import {
    getProperty,
    isBlankString,
    isEmptyObject,
    isObject,
    isString,
    mergeDeep,
    forEach,
} from './utilities'
import {supportedActions} from "./supportedActions";
import XmlRequest from './XmlRequest';

export default class QuickBaseClient {
    constructor(config = {}, loggers_debuggers = {}) {
        this.config = {
            settings: {},
            ...config,
        };
        this.request = null;

        forEach(supportedActions, (opt, name) => {
            QuickBaseClient.prototype[name] = (db_url, parameters, settings) => {
                return this.invoke(name, db_url, parameters, settings, loggers_debuggers);
            }
        });
    }

    invoke(action, db_url, parameters = {}, settings = {}, loggers_debuggers = {}) {
        if (!isString(action) || isBlankString(action)) {
            throw new Error('Argument \'action\' must be a non-empty string');
        }
        if (!isString(db_url) || isBlankString(db_url)) {
            throw new Error('Argument \'db_url\' must be a non-empty string');
        }
        const actionConfig = supportedActions[action];
        if (!isObject(actionConfig) || isEmptyObject(actionConfig)) {
            throw new Error('The specified action is not currently supported by this client: ' + action);
        }

        this.request = new XmlRequest(db_url, this.config);

        parameters = isObject(parameters) ? parameters : {};
        settings = isObject(settings) ? settings : {};

        forEach(actionConfig, (options, parameter) => {
            const value = getProperty(parameters, parameter, options);
            if (value) {
                if (isObject(value)) {
                    if (Array.isArray(value)) {
                        forEach(value, v => {
                            //this.request[k] = v.value;
                            this.request.addXmlParameter(v.name ? v.name : 'field', v.value, v.attrs);
                        });
                    } else {
                        //this.request[parameter] = value.value;
                        this.request.addXmlParameter(parameter, value.value, value.attrs);
                    }
                } else {
                    //this.request[parameter] = value;
                    this.request.addXmlParameter(parameter, value);
                }
            }
        });

        return this.request.send(action, mergeDeep({}, this.config.settings, settings), loggers_debuggers);
    }
}
