import {getProperty, isBlankString, isNonBlankString, isString, mergeDeep, trim, forMap, encode_xml} from "./utilities";
import axios from 'axios';

export default class XmlRequest {
    constructor(db_url, clientConfig) {
        if (!isString(db_url) || isBlankString(db_url)) {
            throw new Error('Argument \'db_url\' must be a non-empty string');
        }
        this.url = db_url.trim();
        this.xmlBuffer = [];

        [
            {parameter: 'ticket', options: {validate: isNonBlankString, normalize: trim}},
            {parameter: 'username', options: {validate: isNonBlankString, normalize: trim}},
            {parameter: 'password', options: {validate: isNonBlankString, normalize: trim}},
            {parameter: 'usertoken', options: {validate: isNonBlankString, normalize: trim}},
            {parameter: 'apptoken', options: {validate: isNonBlankString, normalize: trim}},
        ].forEach(({parameter, options}) => {
            const value = getProperty(clientConfig, parameter, options);
            if (value) {
                //this[parameter] = value;
                this.addXmlParameter(parameter, encode_xml(value));
            }
        });
    }

    addXmlParameter(name = '', value = '', attrs) {
        name = trim(name);
        value = value.toString();

        let attrs_str = '';
        if (typeof attrs !== 'undefined') {
            attrs_str = ' ' + forMap(attrs, (v, k) => `${encode_xml(k)}="${encode_xml(v)}"`).join(' ') + ' ';
        }
        this.xmlBuffer.push('<' + name + attrs_str + '>' + value + '</' + name + '>');
        //this[name] = value;
    }

    xmlBufferToString() {
        return '<qdbapi>' + this.xmlBuffer.join('') + '</qdbapi>';
    }

    async send(action, {proxy_url, ...settings}, loggers_debuggers = {}) {
        let url = this.url + '?act=' + action;
        if (!isBlankString(proxy_url)) {
            url = proxy_url + "?ori_url=" + encodeURI(url);
        }

        const opt = mergeDeep(
            {},
            {
                url,
                method: 'post',
                headers: {
                    'Content-Type': 'application/xml',
                    'QUICKBASE-ACTION': action
                },
                data: this.xmlBufferToString(),
                responseType: 'text',
            },
            settings
        );
        if (loggers_debuggers.log_request_opt) {
            loggers_debuggers.log_request_opt(opt);
        }
        const res = await axios(opt);
        return res.data;
    }
}
